{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from '../hooks/useAuth';\nexport function useRoom(roomId) {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        var _value$likes, _Object$entries$find, _value$likes2;\n\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered,\n          likeCount: Object.values((_value$likes = value.likes) !== null && _value$likes !== void 0 ? _value$likes : {}).length,\n          likeId: (_Object$entries$find = Object.entries((_value$likes2 = value.likes) !== null && _value$likes2 !== void 0 ? _value$likes2 : {}).find(([key, like]) => like.authorId === (user === null || user === void 0 ? void 0 : user.id))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n    return () => {\n      roomRef.off('value');\n    };\n  }, [roomId, user === null || user === void 0 ? void 0 : user.id]);\n  return {\n    questions,\n    title\n  };\n}\n\n_s(useRoom, \"EJAsX06DW6LgyBKDd51CmKMMFsA=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["C:/Nlw/letmeask/src/hooks/useRoom.ts"],"names":["useEffect","useState","database","useAuth","useRoom","roomId","questions","setQuestions","title","setTitle","user","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","id","content","author","isHighlighted","isAnswered","likeCount","values","likes","length","likeId","find","like","authorId","off"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AA4BA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAiC;AAAA;;AACpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAiB,EAAjB,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAWP,OAAO,EAAxB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAc,SAAQP,MAAO,EAA7B,CAAhB;AAEAM,IAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,IAAI,IAAI;AAAA;;AAC1B,YAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,EAArB;AACA,YAAMC,iBAAoC,4BAAGF,YAAY,CAACT,SAAhB,yEAA6B,EAAvE;AAEA,YAAMY,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAAA;;AAC9E,eAAO;AACLC,UAAAA,EAAE,EAAEF,GADC;AAELG,UAAAA,OAAO,EAAEF,KAAK,CAACE,OAFV;AAGLC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAHT;AAILC,UAAAA,aAAa,EAAEJ,KAAK,CAACI,aAJhB;AAKLC,UAAAA,UAAU,EAAEL,KAAK,CAACK,UALb;AAMLC,UAAAA,SAAS,EAAEV,MAAM,CAACW,MAAP,iBAAcP,KAAK,CAACQ,KAApB,uDAA6B,EAA7B,EAAiCC,MANvC;AAOLC,UAAAA,MAAM,0BAAEd,MAAM,CAACC,OAAP,kBAAeG,KAAK,CAACQ,KAArB,yDAA8B,EAA9B,EAAkCG,IAAlC,CAAuC,CAAC,CAACZ,GAAD,EAAMa,IAAN,CAAD,KAAiBA,IAAI,CAACC,QAAL,MAAkB1B,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEc,EAAxB,CAAxD,CAAF,yDAAE,qBAAsF,CAAtF;AAPH,SAAP;AASD,OAVuB,CAAxB;AAYAf,MAAAA,QAAQ,CAACM,YAAY,CAACP,KAAd,CAAR;AACAD,MAAAA,YAAY,CAACW,eAAD,CAAZ;AACD,KAlBD;AAoBA,WAAO,MAAM;AACXP,MAAAA,OAAO,CAAC0B,GAAR,CAAY,OAAZ;AACD,KAFD;AAGD,GA1BM,EA0BJ,CAAChC,MAAD,EAASK,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEc,EAAf,CA1BI,CAAT;AA4BE,SAAO;AAAClB,IAAAA,SAAD;AAAYE,IAAAA;AAAZ,GAAP;AACL;;GAlCeJ,O;UAGKD,O","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { database } from \"../services/firebase\";\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\ntype QuestionType = {\r\n    id: string;\r\n    author: {\r\n      name: string;\r\n      avatar: string;\r\n    }\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighlighted: boolean;\r\n    likeCount: number;\r\n    likeId: string | undefined;\r\n  }\r\n\r\ntype FirebaseQuestions = Record<string, {\r\nauthor: {\r\n    name: string;\r\n    avatar: string;\r\n}\r\ncontent: string;\r\nisAnswered: boolean;\r\nisHighlighted: boolean;\r\nlikes: Record<string,{\r\n  authorId: string;\r\n  }>\r\n}>\r\n\r\nexport function useRoom(roomId: string) {\r\n    const [questions, setQuestions] = useState<QuestionType[]>([])\r\n    const [title, setTitle] = useState('');\r\n    const { user } = useAuth();\r\n\r\n    useEffect(() => {\r\n        const roomRef = database.ref(`rooms/${roomId}`);\r\n    \r\n        roomRef.on('value', room => {\r\n          const databaseRoom = room.val();\r\n          const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n    \r\n          const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n            return {\r\n              id: key,\r\n              content: value.content,\r\n              author: value.author,\r\n              isHighlighted: value.isHighlighted,\r\n              isAnswered: value.isAnswered,\r\n              likeCount: Object.values(value.likes ?? {}).length,\r\n              likeId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0],\r\n            }\r\n          })\r\n    \r\n          setTitle(databaseRoom.title);\r\n          setQuestions(parsedQuestions);\r\n        })\r\n\r\n        return () => {\r\n          roomRef.off('value');\r\n        }\r\n      }, [roomId, user?.id]);\r\n\r\n      return {questions, title }\r\n}"]},"metadata":{},"sourceType":"module"}