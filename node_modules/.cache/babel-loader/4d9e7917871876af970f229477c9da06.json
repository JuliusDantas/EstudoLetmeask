{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nlw\\\\letmeask\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from '../src/pages/Home';\nimport { NewRoom } from './pages/NewRoom';\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from google acount.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n  }, []);\n\n  async function signInWhithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from google acount.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        signInWhithGoogle\n      },\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        component: NewRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Nlw/letmeask/src/App.tsx"],"names":["createContext","useState","useEffect","BrowserRouter","Route","Home","NewRoom","auth","firebase","AuthContext","App","user","setUser","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWhithGoogle","provider","GoogleAuthProvider","result","signInWithPopup"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;AAaA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAC,EAAD,CAAjC;;AAGP,SAASU,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,IAAI,CAACM,kBAAL,CAAwBF,IAAI,IAAE;AAC5B,UAAGA,IAAH,EAAQ;AACN,cAAM;AAAEG,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCL,IAAvC;;AAEE,YAAG,CAACG,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDL,QAAAA,OAAO,CAAC;AACNM,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAMH;AACF,KAfD;AAgBD,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,iBAAeM,iBAAf,GAAmC;AAC7B,UAAMC,QAAQ,GAAG,IAAId,QAAQ,CAACD,IAAT,CAAcgB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACkB,eAAL,CAAqBH,QAArB,CAArB;;AAGA,QAAGE,MAAM,CAACb,IAAV,EAAgB;AACd,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACb,IAA9C;;AAEA,UAAG,CAACG,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDL,MAAAA,OAAO,CAAC;AACNM,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAMD;AAEN;;AAED,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEJ,QAAAA,IAAF;AAAQU,QAAAA;AAAR,OAA7B;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAEhB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GArDQI,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import {createContext, useState, useEffect} from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport {Home} from '../src/pages/Home'\nimport { NewRoom } from './pages/NewRoom';\n\nimport { auth, firebase } from './services/firebase'\n\ntype User = {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\ntype AuthContextType = {\n  user: User | undefined;\n  signInWhithGoogle: () => Promise<void>;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\n\nfunction App() {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user=>{\n      if(user){\n        const { displayName, photoURL, uid } = user;\n\n          if(!displayName || !photoURL) {\n            throw new Error('Missing information from google acount.')\n          }\n\n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n\n          })\n      }\n    })\n  }, [])\n\n  async function signInWhithGoogle() {\n        const provider = new firebase.auth.GoogleAuthProvider();\n\n        const result = await auth.signInWithPopup(provider);\n\n      \n        if(result.user) {\n          const { displayName, photoURL, uid } = result.user;\n\n          if(!displayName || !photoURL) {\n            throw new Error('Missing information from google acount.')\n          }\n\n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n\n          })\n        }\n        \n  }\n\n  return (\n    <BrowserRouter>\n      <AuthContext.Provider value={{ user, signInWhithGoogle }}>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/rooms/new\" component={NewRoom} />\n      </AuthContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}