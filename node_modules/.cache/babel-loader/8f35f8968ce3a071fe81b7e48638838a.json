{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nlw\\\\letmeask\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from '../src/pages/Home';\nimport { NewRoom } from './pages/NewRoom';\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from google acount.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWhithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from google acount.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/rooms/new\",\n      component: NewRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Nlw/letmeask/src/App.tsx"],"names":["useState","useEffect","BrowserRouter","Route","Home","NewRoom","auth","firebase","App","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWhithGoogle","provider","GoogleAuthProvider","result","signInWithPopup"],"mappings":";;;AAAA,SAAuBA,QAAvB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,WAAW,GAAGL,IAAI,CAACM,kBAAL,CAAwBH,IAAI,IAAE;AAChD,UAAGA,IAAH,EAAQ;AACN,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCN,IAAvC;;AAEE,YAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAMH;AACF,KAfmB,CAApB;AAiBA,WAAO,MAAM;AACXH,MAAAA,WAAW;AACZ,KAFD;AAGD,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,iBAAeS,iBAAf,GAAmC;AAC7B,UAAMC,QAAQ,GAAG,IAAId,QAAQ,CAACD,IAAT,CAAcgB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACkB,eAAL,CAAqBH,QAArB,CAArB;;AAGA,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACd,IAA9C;;AAEA,UAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAMD;AAEN;;AAED,sBACE,QAAC,aAAD;AAAA,4BACU,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,KAAK,MAArB;AAAsB,MAAA,SAAS,EAAEV;AAAjC;AAAA;AAAA;AAAA;AAAA,YADV,eAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,YAAZ;AAAyB,MAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAvDQG,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import {createContext, useState, useEffect} from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport {Home} from '../src/pages/Home'\nimport { NewRoom } from './pages/NewRoom';\n\nimport { auth, firebase } from './services/firebase'\n\n\nfunction App() {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user=>{\n      if(user){\n        const { displayName, photoURL, uid } = user;\n\n          if(!displayName || !photoURL) {\n            throw new Error('Missing information from google acount.')\n          }\n\n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n\n          })\n      }\n    })\n\n    return () => {\n      unsubscribe();\n    }\n  }, [])\n\n  async function signInWhithGoogle() {\n        const provider = new firebase.auth.GoogleAuthProvider();\n\n        const result = await auth.signInWithPopup(provider);\n\n      \n        if(result.user) {\n          const { displayName, photoURL, uid } = result.user;\n\n          if(!displayName || !photoURL) {\n            throw new Error('Missing information from google acount.')\n          }\n\n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n\n          })\n        }\n        \n  }\n\n  return (\n    <BrowserRouter>\n              <Route path=\"/\" exact component={Home} />\n        <Route path=\"/rooms/new\" component={NewRoom} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}