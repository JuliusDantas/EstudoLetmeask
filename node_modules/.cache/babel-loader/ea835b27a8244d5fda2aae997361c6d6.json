{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nlw\\\\letmeask\\\\src\\\\context\\\\AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { auth, firebase } from '../services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from google acount.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWhithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from google acount.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWhithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Nlw/letmeask/src/context/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWhithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAAQA,aAAR,EAAkCC,SAAlC,EAA6CC,QAA7C,QAA4D,OAA5D;AAEA,SAAQC,IAAR,EAAcC,QAAd,QAA8B,sBAA9B;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAkBP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAA6D;AAAA;;AAClE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAE;AAChD,UAAGA,IAAH,EAAQ;AACN,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCN,IAAvC;;AAEE,YAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAMH;AACF,KAfmB,CAApB;AAiBA,WAAO,MAAM;AACXH,MAAAA,WAAW;AACZ,KAFD;AAGD,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,iBAAeS,iBAAf,GAAmC;AAC7B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB;;AAGA,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACd,IAA9C;;AAEA,UAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAMD;AAEN;;AACC,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GArDelB,mB;;KAAAA,mB","sourcesContent":["import {createContext, ReactNode, useEffect, useState} from 'react';\r\n\r\nimport {auth, firebase } from '../services/firebase'\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\ntype User = {\r\n    id: string;\r\n    name: string;\r\n    avatar: string;\r\n  }\r\n  \r\n  type AuthContextType = {\r\n    user: User | undefined;\r\n    signInWhithGoogle: () => Promise<void>;\r\n  }\r\n\r\n  type AuthContextProviderProps = {\r\n      children: ReactNode;\r\n  }\r\n\r\n  \r\nexport function AuthContextProvider(props: AuthContextProviderProps){\r\n  const [user, setUser] = useState<User>();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user=>{\r\n      if(user){\r\n        const { displayName, photoURL, uid } = user;\r\n\r\n          if(!displayName || !photoURL) {\r\n            throw new Error('Missing information from google acount.')\r\n          }\r\n\r\n          setUser({\r\n            id: uid,\r\n            name: displayName,\r\n            avatar: photoURL\r\n\r\n          })\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, [])\r\n\r\n  async function signInWhithGoogle() {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        const result = await auth.signInWithPopup(provider);\r\n\r\n      \r\n        if(result.user) {\r\n          const { displayName, photoURL, uid } = result.user;\r\n\r\n          if(!displayName || !photoURL) {\r\n            throw new Error('Missing information from google acount.')\r\n          }\r\n\r\n          setUser({\r\n            id: uid,\r\n            name: displayName,\r\n            avatar: photoURL\r\n\r\n          })\r\n        }\r\n        \r\n  }\r\n    return (\r\n        <AuthContext.Provider value={{ user, signInWhithGoogle }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}